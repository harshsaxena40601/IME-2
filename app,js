// Wait for DOM to be fully loaded
document.addEventListener("DOMContentLoaded", function () {
  // Mobile menu functionality
  const mobileMenuBtn = document.createElement("button");
  mobileMenuBtn.innerHTML = '<i class="fas fa-bars"></i>';
  mobileMenuBtn.className = "mobile-menu-btn";
  mobileMenuBtn.style.cssText = `
        display: none;
        background: none;
        border: none;
        color: #374151;
        font-size: 1.25rem;
        cursor: pointer;
        padding: 0.5rem;
    `;

  // Show mobile menu button on mobile devices
  const mediaQuery = window.matchMedia("(max-width: 767px)");
  function handleMobileMenu(e) {
    if (e.matches) {
      mobileMenuBtn.style.display = "block";
    } else {
      mobileMenuBtn.style.display = "none";
      const navLinks = document.querySelector(".nav-links");
      if (navLinks) {
        navLinks.classList.remove("show");
      }
    }
  }
  mediaQuery.addListener(handleMobileMenu);
  handleMobileMenu(mediaQuery);

  const navContent = document.querySelector(".nav-content");
  if (navContent) {
    navContent.appendChild(mobileMenuBtn);
  }

  const navLinks = document.querySelector(".nav-links");

  mobileMenuBtn.addEventListener("click", function () {
    if (navLinks) {
      navLinks.classList.toggle("show");
    }
  });

  // Close mobile menu when clicking on a link
  document.querySelectorAll(".nav-link").forEach((link) => {
    link.addEventListener("click", function () {
      if (navLinks) {
        navLinks.classList.remove("show");
      }
    });
  });

  // Intersection Observer for animations
  const observerOptions = {
    threshold: 0.1,
    rootMargin: "0px 0px -50px 0px",
  };

  const observer = new IntersectionObserver(function (entries) {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add("visible");
      }
    });
  }, observerOptions);

  // Add fade-in animation to cards
  document.querySelectorAll(".card-hover").forEach((card) => {
    card.classList.add("fade-in");
    observer.observe(card);
  });

  // Stats counter animation
  function animateCounter(element, target, suffix = "") {
    let current = 0;
    const isDecimal = target.toString().includes(".");
    const increment = isDecimal ? target / 48 : target / 100;

    const timer = setInterval(() => {
      current += increment;
      if (current >= target) {
        if (isDecimal) {
          element.textContent = target.toFixed(1) + suffix;
        } else {
          element.textContent = target + suffix;
        }
        clearInterval(timer);
      } else {
        if (isDecimal) {
          element.textContent = current.toFixed(1) + suffix;
        } else {
          element.textContent = Math.floor(current) + suffix;
        }
      }
    }, 20);
  }

  // Trigger counter animation when stats section is visible
  const statsObserver = new IntersectionObserver(
    function (entries) {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const counters = entry.target.querySelectorAll(".stats-counter");
          counters.forEach((counter) => {
            const text = counter.textContent.trim();

            if (!counter.dataset.animated) {
              counter.dataset.animated = "true";

              if (text.includes("4.8")) {
                counter.textContent = "0.0/5";
                animateCounter(counter, 4.8, "/5");
              } else if (text.includes("500+")) {
                counter.textContent = "0+";
                animateCounter(counter, 500, "+");
              } else if (text.includes("12")) {
                counter.textContent = "0";
                animateCounter(counter, 12);
              }
            }
          });
          statsObserver.unobserve(entry.target);
        }
      });
    },
    { threshold: 0.5 }
  );

  // Observe the stats section
  const statsSection = document.querySelector(".stats-grid");
  if (statsSection) {
    statsObserver.observe(statsSection.parentElement);
  }

  // Form submission handling
  const contactForm = document.querySelector(".contact-form");
  if (contactForm) {
    contactForm.addEventListener("submit", function (e) {
      e.preventDefault();

      // Get form data
      const formData = new FormData(this);
      const formObject = {};

      // Convert form data to object
      for (let [key, value] of formData.entries()) {
        formObject[key] = value;
      }

      // Get submit button
      const submitButton = this.querySelector(".form-submit");
      if (submitButton) {
        const originalText = submitButton.textContent;

        // Show loading state
        submitButton.textContent = "Sending...";
        submitButton.disabled = true;

        // Simulate form submission
        setTimeout(() => {
          // Show success message
          submitButton.textContent = "Message Sent!";
          submitButton.style.backgroundColor = "#10b981";

          // Reset form after 2 seconds
          setTimeout(() => {
            this.reset();
            submitButton.textContent = originalText;
            submitButton.style.backgroundColor = "";
            submitButton.disabled = false;
          }, 2000);
        }, 1000);
      }
    });
  }

  // Typing effect for hero title
  function typeWriter(element, text, speed = 50) {
    let i = 0;
    const originalHTML = element.innerHTML;
    element.innerHTML = "";

    // Extract text content while preserving structure
    const tempDiv = document.createElement("div");
    tempDiv.innerHTML = originalHTML;
    const plainText = tempDiv.textContent || tempDiv.innerText || "";

    function type() {
      if (i < plainText.length) {
        // Rebuild HTML structure character by character
        const currentText = plainText.substring(0, i + 1);
        element.innerHTML = originalHTML.replace(plainText, currentText);
        i++;
        setTimeout(type, speed);
      }
    }

    type();
  }

  // Initialize typing effect with delay
  setTimeout(() => {
    const heroTitle = document.querySelector(".hero-title");
    if (heroTitle) {
      const text = heroTitle.textContent;
      typeWriter(heroTitle, text, 30);
    }
  }, 500);

  // Add scroll-triggered animations for sections
  const sections = document.querySelectorAll("section");
  sections.forEach((section) => {
    section.classList.add("fade-in");
    observer.observe(section);
  });

  // Hover effects for interactive elements
  const buttons = document.querySelectorAll(
    "button, .btn-primary, .btn-secondary"
  );
  buttons.forEach((button) => {
    button.addEventListener("mouseenter", function () {
      this.style.transform = "translateY(-2px)";
    });

    button.addEventListener("mouseleave", function () {
      this.style.transform = "translateY(0)";
    });
  });

  // Add click ripple effect to buttons
  buttons.forEach((button) => {
    button.addEventListener("click", function (e) {
      // Only add ripple if button doesn't already have one
      if (this.style.position !== "relative") {
        this.style.position = "relative";
        this.style.overflow = "hidden";
      }

      const ripple = document.createElement("span");
      const rect = this.getBoundingClientRect();
      const size = Math.max(rect.width, rect.height);
      const x = e.clientX - rect.left - size / 2;
      const y = e.clientY - rect.top - size / 2;

      ripple.style.cssText = `
                position: absolute;
                width: ${size}px;
                height: ${size}px;
                left: ${x}px;
                top: ${y}px;
                background: rgba(255, 255, 255, 0.6);
                border-radius: 50%;
                transform: scale(0);
                animation: ripple 0.6s ease-out;
                pointer-events: none;
                z-index: 1;
            `;

      // Remove any existing ripples
      const existingRipples = this.querySelectorAll(".ripple-effect");
      existingRipples.forEach((r) => r.remove());

      ripple.classList.add("ripple-effect");
      this.appendChild(ripple);

      // Remove ripple after animation
      setTimeout(() => {
        if (ripple.parentNode) {
          ripple.remove();
        }
      }, 600);
    });
  });

  // Add CSS keyframes for ripple animation if not already present
  if (!document.getElementById("ripple-styles")) {
    const style = document.createElement("style");
    style.id = "ripple-styles";
    style.textContent = `
            @keyframes ripple {
                to {
                    transform: scale(4);
                    opacity: 0;
                }
            }
            
            .fade-in {
                opacity: 0;
                transform: translateY(30px);
                transition: opacity 0.8s ease, transform 0.8s ease;
            }
            
            .fade-in.visible {
                opacity: 1;
                transform: translateY(0);
            }
            
            .card-hover {
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            }
            
            .card-hover:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
            }
            
            .mobile-menu-btn:hover {
                color: #4f46e5;
                transform: scale(1.1);
                transition: all 0.2s ease;
            }
            
            @media (max-width: 767px) {
                .nav-links {
                    display: none;
                    position: absolute;
                    top: 100%;
                    left: 0;
                    right: 0;
                    background: white;
                    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
                    flex-direction: column;
                    padding: 1rem 0;
                }
                
                .nav-links.show {
                    display: flex;
                }
                
                .nav-link {
                    padding: 0.75rem 1.5rem;
                    border-bottom: 1px solid #f3f4f6;
                }
                
                .nav-link:last-child {
                    border-bottom: none;
                }
            }
        `;
    document.head.appendChild(style);
  }

  // Lazy loading for images
  const images = document.querySelectorAll("img[data-src]");
  const imageObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const img = entry.target;
        img.src = img.dataset.src;
        img.classList.remove("lazy");
        imageObserver.unobserve(img);
      }
    });
  });

  images.forEach((img) => imageObserver.observe(img));

  // Add loading animation for page
  window.addEventListener("load", function () {
    const loader = document.querySelector(".page-loader");
    if (loader) {
      loader.style.opacity = "0";
      setTimeout(() => {
        loader.style.display = "none";
      }, 300);
    }

    // Trigger initial animations
    document.body.classList.add("loaded");
  });

  console.log("✅ Interactive website JavaScript loaded successfully!");
});

// Additional utility functions
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

function throttle(func, limit) {
  let inThrottle;
  return function () {
    const args = arguments;
    const context = this;
    if (!inThrottle) {
      func.apply(context, args);
      inThrottle = true;
      setTimeout(() => (inThrottle = false), limit);
    }
  };
}
